openapi: 3.0.3
info:
  title: Firestore Adapter Service API
  description: |
    REST API for abstracting Google Firestore operations for use by other backend services.
    Supports CRUD operations for any collection.
  version: "1.0.0"
servers:
  - url: https://<cloud-run-url>
paths:
  /:
    get:
      summary: Root Endpoint
      description: Returns a welcome message.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                example: { "message": "Welcome to Firestore Adapter" }

  /health:
    get:
      summary: Health Check
      description: Service health/status endpoint.
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                example: { "status": "ok" }

  /documents/{collection}:
    get:
      summary: List documents in collection
      parameters:
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: Name of the Firestore collection
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
    post:
      summary: Create a document in collection
      parameters:
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: Name of the Firestore collection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        '201':
          description: Document created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCreated'

  /documents/{collection}/{doc_id}:
    get:
      summary: Get a document by ID
      parameters:
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: Name of the Firestore collection
        - in: path
          name: doc_id
          required: true
          schema:
            type: string
          description: Document ID
      responses:
        '200':
          description: The document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Not found
    put:
      summary: Update a document by ID
      parameters:
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: Name of the Firestore collection
        - in: path
          name: doc_id
          required: true
          schema:
            type: string
          description: Document ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Not found
    delete:
      summary: Delete a document by ID
      parameters:
        - in: path
          name: collection
          required: true
          schema:
            type: string
          description: Name of the Firestore collection
        - in: path
          name: doc_id
          required: true
          schema:
            type: string
          description: Document ID
      responses:
        '200':
          description: Document deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Not found

components:
  schemas:
    Document:
      type: object
      description: A Firestore document (arbitrary structure)
      additionalProperties: true
      example:
        id: "abc123"
        name: "John Doe"
        email: "john@example.com"
        createdAt: "2025-05-27T10:20:00Z"
    DocumentCreated:
      type: object
      description: Returned after creating a document
      properties:
        id:
          type: string
        [other fields]:
          description: Any fields provided in request
      example:
        id: "abc123"
        name: "John Doe"
        email: "john@example.com"
        createdAt: "2025-05-27T10:20:00Z"
