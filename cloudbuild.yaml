steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/firestore-adapter', '.']

  # Step 2: Push Docker image to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/firestore-adapter']

  # Step 3: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'firestore-adapter'
      - '--image'
      - 'gcr.io/$PROJECT_ID/firestore-adapter'
      - '--region'
      - 'europe-west1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--service-account'
      - 'rhea-app-sa@$PROJECT_ID.iam.gserviceaccount.com'
      - '--port'
      - '8080'

  # Step 4: Grant public (unauthenticated) access
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'services'
      - 'add-iam-policy-binding'
      - 'firestore-adapter'
      - '--region'
      - 'europe-west1'
      - '--platform'
      - 'managed'
      - '--member'
      - 'allUsers'
      - '--role'
      - 'roles/run.invoker'

  # Step 5: Sanity check with retry
  -   - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - -c
      - |
        echo "üß™ Running sanity check on deployed service..."

        SERVICE_URL=$(gcloud run services describe firestore-adapter \
          --region europe-west1 \
          --platform managed \
          --format='value(status.url)')

        echo "üåê Service URL: $SERVICE_URL"

        MAX_RETRIES=5
        DELAY=5

        for i in $(seq 1 $MAX_RETRIES); do
          echo "‚è≥ Attempt $i: Checking $SERVICE_URL/health ..."
          STATUS=$(curl -s -o response.txt -w "%{http_code}" "$SERVICE_URL/health")
          if [[ "$STATUS" == "200" ]]; then
            echo "‚úÖ /health is live!"
            cat response.txt
            exit 0
          fi
          echo "‚ùå Not ready yet (status $STATUS). Retrying in $DELAY seconds..."
          sleep $DELAY
        done

        echo "‚ùå Sanity check failed after $MAX_RETRIES attempts."
        exit 1


options:
  logging: CLOUD_LOGGING_ONLY
